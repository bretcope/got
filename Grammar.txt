--- DESCRIPTION ----------------------------------------------------------------

This is the grammar for GOT's configuration files (profiles and resources). It
defines the basics for implementing a parser. However, a configuration which
parses correctly may still be invalid for other (semantic) reasons.

Grammar Conventions:

- Comments begin with "##" end go until the end of the line.
- Terminals are camelCase or literal symbols.
- Non-terminals are PascalCase
- Each production of a non-terminal is placed on its own line, indented from the
  non-terminal's name.
- A grammar element followed by "_opt" is optional, and can resolve to Îµ

--- FILE FORMAT ----------------------------------------------------------------

GOT configuration files must be UTF-8 encoded.

--- LEXER DESCRIPTION ----------------------------------------------------------

The lexer is partially whitespace-sensitive. It will emit EndOfLine tokens for
non-trivial lines (a line which consists of more than just whitespace and/or
comments).

When the end of input is reached, the lexer will emit an EndOfLine token (only
if the previous token was not an EndOfLine), followed by zero or more Outdent
tokens to balance any outstanding Indent tokens, followed by an EndOfInput
token.

Comments begin with a hash (#) and are terminated at a new line (LF or CRLF).
Comments and non-semantic whitespace do not generate tokens on their own. They
are attached as "trivia" to the next token.

The NUL character is not currently supported anywhere in configuration files.

--- TERMINALS ------------------------------------------------------------------

## Significant Whitespace

EndOfInput      endOfInput
Indent          indent
Outdent         outdent
EndOfLine       endOfLine

## Text

Word            word
LineText        lineText
QuotedText      quotedText
BlockText       blockText

## Symbols

Colon           :
GreaterThan     >

--- SELECTIVE TERMINAL DESCRIPTIONS --------------------------------------------

Indent/Outdent: The indent and outdent terminals are used to describe the start
                and end of a block which shares a common minimum-indent level.

                Each time a "non-trival line" (NTL) is encountered which is
                indented further than the previous NTL, one or more "Indent"
                tokens are emitted. Each time an NTL is indented less than the
                previous NTL, one or more "Outdent" tokens are emitted.

                One level of indentation is four spaces.

                Note: A non-trivial line is a line which consists of more than
                just whitespace and/or comments.

Word:           A word is an a-z, A-Z, or _ character, followed by zero or more
                a-z, A-Z, 0-9, or _ characters. Other symbols and unicode
                characters are not currently supported. However, most can be
                included in quoted text and block text.

LineText:       Line text is a sequence of any ASCII character except a new line
                (LF or CR) or hash (#) character. Unicode characters are not
                supported in text tokens, but are supported in quoted text and
                block text.

QuotedText:     Quoted text begins with a double-quote ("), followed by zero or
                more characters, and ending with an unescaped double-quote.
                Quoted text must not contain new-line characters (LF or CR).

                A literal double-quote within quoted text can be represented by
                escaping it with a backslash character (\"). Other standard
                escape sequences should be supported.

BlockText:      Block text begins at a new line (LF or CRLF) immediately
                following a greater-than (>) token. Each subsequent line is
                considered part of the block text if it is blank, whitespace,
                or indented at least four spaces more than the first line
                (which had the ">"). The block terminates when a line is reached
                which doesn't meet one of those conditions, or EndOfInput is
                reached.

                The string generated by this token is that of the lines
                following the ">" where the required indentation is removed.
                Original line endings are preserved.

--- NON-TERMINALS --------------------------------------------------------------

Start
    File

File
    PropertyList endOfInput

PropertyList
    Property PropertyList
    Property

Property
    PropertyDeclaration PropertyValue endOfLine
    PropertyDeclaration endOfLine PropertyBlock_opt

PropertyDeclaration
    ## property type, followed by an optional name
    word word
    word quotedText
    word

PropertyValue
    : quotedText
    : lineText
    > blockText

PropertyBlock
    indent PropertyList outdent




